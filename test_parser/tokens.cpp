#line 2 "tokens.cpp"

#line 4 "tokens.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

/* %endif */

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(yyscanner) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 212
#define YY_END_OF_BUFFER 213
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[816] =
    {   0,
        0,    0,  213,  211,    1,    2,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  201,  199,  211,  211,  211,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  211,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      211,  184,    0,  202,  192,  185,  195,  189,  179,  191,
      180,  198,  204,  190,  205,  201,    0,    0,  207,  201,
        0,  199,  199,  187,  181,  183,  182,  188,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  196,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,

       13,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,   17,  210,  210,   53,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  197,  186,    0,  204,  203,
        0,  205,    0,  206,  200,  193,  194,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,   85,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,   16,  210,
      210,  210,  210,  210,  210,  210,  210,  210,    8,  210,

      210,  210,  210,  210,  210,  210,  210,   54,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,    0,  204,    0,  203,
        0,  205,  206,  200,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,    4,  210,  147,  140,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,   15,
       88,  210,  210,  210,  210,  210,  210,   93,  210,    7,
      210,  210,  210,  210,  210,   25,   26,   27,  210,  210,
       44,  104,  143,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,   91,  210,  208,  210,  210,    9,  210,  210,
      210,  210,  210,   10,  210,  210,    0,  203,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,   22,
       23,   24,   11,  210,  210,   86,  210,  210,    3,  210,
      210,  210,  210,  210,  209,  210,  107,    5,  210,  210,
      109,  110,  111,  145,  210,  210,  210,   55,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,   43,  210,
      210,  210,  210,  210,  105,  210,  210,  210,  210,  210,
      210,  210,  210,  210,   28,   29,   30,  210,   87,  210,

      142,  210,  210,   14,   67,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  150,  210,  210,  210,  148,  210,
      210,  210,  106,  101,  153,  124,  125,  126,    6,   31,
       32,   33,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,   96,  210,  210,  210,   61,  210,  210,
      210,  210,  210,   92,  210,  210,   99,   19,  210,  210,
      139,  100,   20,  151,   94,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,   21,  210,  210,  210,   95,   18,  121,  122,
      123,  210,  210,  210,  210,  210,  210,  210,  210,  210,

      112,  113,  114,  115,  116,  117,  118,  119,  120,  210,
      210,  210,  210,  210,  154,  155,  156,  210,  210,  210,
      210,   46,  144,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,   89,  210,  210,  210,  210,  210,   56,
      210,   57,  210,  210,  210,  210,  210,   79,  210,  210,
      210,  210,  210,  210,  210,  210,   58,  210,   12,  102,
      127,  128,  129,  130,  131,  132,  133,  134,  135,   34,
       35,   36,   37,   38,   39,   40,   41,   42,  210,  210,
      158,  159,  160,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,   97,  210,  210,  210,  210,  210,

      210,  210,  210,   90,   45,  162,  163,  164,  210,  210,
      108,   98,  210,  210,  210,  210,  210,  210,  210,   68,
       70,   74,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  157,  103,   59,  141,
      210,  210,  149,  146,   65,  210,  210,  210,  210,  210,
      210,  210,  210,   51,   49,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  161,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  165,   52,
       48,   80,   82,   84,  210,  210,  210,  210,   72,   75,

      210,  210,  210,   64,  210,  210,  210,  210,  210,  210,
      210,  176,  210,  210,  210,  210,  210,   47,  210,  210,
      210,  210,  210,  210,   77,  210,  210,  210,  210,  210,
       66,  210,  210,  210,  177,  166,  210,  167,  210,  210,
      210,  210,  210,  210,  210,  210,  178,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  168,  169,  210,  172,
      210,  173,  210,   62,  136,  137,  152,  170,  171,  210,
      210,  210,   69,   71,  210,  210,   50,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
       60,  210,   81,   83,  210,   73,   76,   63,  210,  210,

      210,  210,  210,  210,  210,  210,  174,  175,  210,  210,
      138,  210,  210,   78,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    1,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   18,   18,   19,   19,    1,    1,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   29,   30,   29,   29,   31,   32,   29,   33,   34,
       29,   35,   36,   37,   38,   29,   39,   40,   29,   29,
        1,    1,    1,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   29,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,   68,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    4,    4,    4,    4,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    5,    4,    4,    4,    4,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[821] =
    {   0,
        0,    0,  979,  980,  980,  980,  957,  972,  955,   62,
      954,   61,   63,   61,  953,   74,  129,   51,  952,   73,
        0,  910,  915,  919,  907,  911,  928,  923,   39,  944,
       36,   40,   61,   56,   55,   73,   69,   74,  103,   49,
      917,   76,  901,  106,   84,  110,  119,   78,  107,  912,
      111,  980,  956,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  153,  980,  155,   70,  193,  179,  980,  980,
        0,    0,  980,  939,  980,  980,  980,  938,    0,  910,
      899,  900,  894,  903,  138,  898,  887,  900,  980,  889,
      894,  891,  900,  886,  883,  888,  900,  159,  894,  881,

      878,  879,  876,  876,  882,  119,  878,  875,  876,  871,
      874,  876,  880,    0,  873,  884,  162,  870,  162,  879,
      869,  166,  862,  177,  871,  874,  876,  858,  854,  862,
      859,  848,  127,  856,  862,  857,  860,  176,  852,  173,
      139,  858,  849,  101,  856,  980,  980,  233,  980,  206,
      246,  980,  253,  260,  219,  980,  980,  858,  843,  857,
      845,  846,  839,  853,  841,  837,  854,  845,    0,  841,
      851,  183,  845,  831,  831,  828,  834,  171,  845,  842,
      842,  838,  829,  836,  822,  820,  833,  836,    0,  834,
      820,  814,  827,  824,  830,  823,  820,  808,  267,  826,

      821,  818,  808,  814,  817,  807,  815,    0,  808,  799,
      803,  813,  803,  794,  813,  796,  794,  805,  790,  788,
      802,  787,  789,  786,  802,  797,  796,  799,  780,  232,
      789,  783,  772,  791,  793,  781,  277,  284,  306,  980,
      320,  327,  980,  980,  787,  772,  796,  769,  769,  781,
      763,  773,  764,  769,  761,  270,  770,    0,    0,  774,
      762,  760,  764,  761,  756,  765,  753,  771,  759,    0,
        0,  753,  764,  763,  763,  747,  764,    0,  748,  289,
      747,  755,  756,  746,  740,    0,    0,    0,  741,  740,
      755,    0,    0,  735,  736,  256,  736,  747,  742,  731,

      740,  739,  730,  733,  733,  725,  728,  733,  738,  723,
      736,  726,    0,  723,    0,  732,  728,  311,  719,  719,
      725,  724,  721,    0,  710,  723,  334,  343,  710,  734,
      706,  705,  729,  716,  702,  715,  702,  711,  712,    0,
        0,    0,    0,  711,  700,    0,  700,  699,    0,  698,
      699,  693,  704,  694,    0,  690,  314,  349,  694,  687,
      681,  680,  679,    0,  696,  353,  695,    0,  693,  689,
      199,  684,  680,  686,  689,  675,  688,  672,    0,  672,
      686,  674,  686,  681,    0,  679,  681,  664,  666,  673,
      679,  672,  673,  672,    0,    0,    0,  659,    0,  661,

        0,  660,  664,    0,    0,  671,  654,  678,  650,  663,
      647,  649,  660,  652,    0,  646,  653,  661,    0,  640,
      640,  654,  357,  656,    0,  633,  632,  631,    0,  630,
      629,  628,  638,  641,  364,  367,  370,  374,  664,  663,
      662,  625,  624,    0,  642,  641,  631,    0,  624,  638,
      624,  620,  620,    0,  626,  625,    0,    0,  623,  615,
        0,    0,    0,    0,    0,  612,  618,  623,  378,  615,
      622,  619,  613,  605,  618,  621,  604,  603,  602,  282,
      381,  613,    0,  613,  603,  610,    0,    0,    0,    0,
        0,  602,  392,  395,  398,  401,  404,  407,  589,  611,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  627,
      626,  625,  588,  587,  402,  403,    0,  600,  603,  601,
      589,    0,    0,  599,  596,  584,  594,  583,  582,  581,
      412,  590,  589,    0,  609,  608,  607,  570,  569,    0,
      584,    0,  582,  583,  584,  565,  578,    0,  577,  566,
      561,  595,  594,  593,  556,  581,    0,  573,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  570,  555,
      590,  589,    0,  563,  566,  550,  558,  548,  556,  557,
      557,  556,  541,  554,    0,  543,  554,  542,  541,  537,

      569,  568,  531,    0,  549,  568,  567,    0,  541,  544,
        0,    0,  537,  531,  540,  541,  415,  528,  539,  558,
      409,    0,  536,  518,  526,  520,  529,  516,  515,  525,
      525,  512,  527,  510,  525,  520,    0,    0,    0,    0,
      512,  504,    0,    0,    0,  529,  528,  514,  515,  501,
      500,  510,  510,    0,    0,  506,  500,  528,  527,  526,
      493,  489,  490,  489,  511,  499,  486,  487,  493,  496,
      482,  481,  492,    0,  495,  491,  493,  489,  475,  490,
      481,  484,  483,  481,  476,  468,  467,  478,    0,    0,
        0,  501,  500,    0,  479,  474,  461,  460,  495,  494,

      469,  456,  467,    0,  470,  469,  452,  444,  452,  442,
      450,    0,  445,  442,  459,  458,  455,    0,  458,  457,
      440,  439,  438,  437,    0,  452,  451,  434,  433,  448,
        0,  431,  423,  422,    0,  451,  422,  449,  420,  432,
      435,  420,   76,  128,  139,  169,    0,  178,  180,  258,
      245,  247,  295,  311,  321,  353,    0,    0,  351,    0,
      354,    0,  348,    0,  397,    0,    0,    0,    0,  391,
      392,  377,    0,    0,  397,  399,    0,  387,  401,  402,
      390,  397,  382,  383,  393,  385,  386,  392,  408,  409,
        0,  413,    0,    0,  401,    0,    0,    0,  401,  402,

      414,  425,  398,  399,  407,  404,    0,    0,  402,  424,
        0,  407,  422,    0,  980,  469,  472,  468,  475,  476
    } ;

static yyconst flex_int16_t yy_def[821] =
    {   0,
      815,    1,  815,  815,  815,  815,  815,  816,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  815,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      815,  815,  816,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  818,  815,  819,   16,  815,  815,  815,  815,
      820,   17,  815,  815,  815,  815,  815,  815,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  815,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  815,  815,  815,  815,  819,
      815,  815,  815,  815,  820,  815,  815,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  815,  815,  815,  815,
      815,  815,  815,  815,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  815,  815,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,    0,  815,  815,  815,  815,  815
    } ;

static yyconst flex_int16_t yy_nxt[1049] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   21,   21,   21,   21,   21,   23,
       24,   21,   25,   26,   27,   28,   29,   21,   21,   21,
       30,   21,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   21,   21,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   21,   21,   21,   51,   56,   59,
       74,   75,   61,   63,   63,   63,   63,   63,   63,   63,
       90,   60,   57,   62,   65,   87,   66,   66,   66,   66,
       66,   66,   67,   77,   78,   91,   92,   88,   93,  118,

       68,   69,   99,   94,   95,  119,  100,   96,  102,  815,
      103,   70,  101,   71,   97,  105,  112,   98,  121,  104,
       68,   69,  109,  106,  113,  110,  107,  111,  140,  108,
      128,  146,  122,  141,  815,   70,  766,  142,   71,   65,
      129,   72,   72,   72,   72,   72,   72,   72,  124,  143,
      114,  234,  130,  115,  235,   68,   69,  116,  117,  131,
      132,  163,  125,  144,  126,  136,   73,  127,  137,  219,
      133,  134,  186,  135,  164,   68,   69,  138,  147,  148,
      149,  151,  152,  187,  139,  220,  767,  153,  153,  230,
       73,  154,  154,  154,  154,  154,  154,  154,  231,  148,

      149,  151,  152,   65,  768,   67,   67,   67,   67,   67,
       67,   67,  176,  177,  178,  197,  206,  202,  198,   68,
       69,  209,  199,  207,  200,  203,  225,  228,  229,  258,
      265,  266,  239,  240,  769,  210,  770,  226,  771,   68,
       69,  237,  237,  259,  447,  238,  238,  238,  238,  238,
      238,  238,  239,  240,  241,  241,  244,  448,  242,  242,
      242,  242,  242,  242,  242,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  319,
      244,  286,  287,  288,  340,  341,  342,  243,  320,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,

      238,  238,  238,  361,  362,  363,  550,  243,  772,  374,
      773,  149,  774,  289,  327,  327,  375,  551,  328,  328,
      328,  328,  328,  328,  328,  395,  396,  397,  426,  427,
      428,  149,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  328,  328,  328,  328,
      328,  328,  328,  775,  152,  328,  328,  328,  328,  328,
      328,  328,  429,  430,  431,  432,  439,  440,  441,  776,
      240,  489,  490,  491,  152,  777,  442,  443,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
      240,  535,  536,  537,  552,  553,  554,  513,  514,  778,

      779,  538,  539,  780,  781,  555,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  573,  574,
      575,  576,  577,  578,  586,  588,  601,  602,  658,  659,
      660,  664,  782,  783,  784,  603,  785,  587,  589,  786,
      665,  787,  788,  789,  790,  791,  792,  793,  794,  795,
      796,  797,  798,  799,  800,  801,  802,  803,  804,  805,
      806,  807,  808,  809,  810,  811,  812,  813,  814,   53,
       63,   53,   53,   53,   79,   79,   79,  150,  155,  155,
      765,  764,  763,  762,  761,  760,  759,  758,  757,  756,
      755,  754,  753,  752,  751,  750,  749,  748,  747,  746,

      745,  744,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      663,  662,  661,  657,  656,  655,  654,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,

      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  585,  584,
      583,  582,  581,  580,  579,  560,  559,  558,  557,  556,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  488,

      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  474,  473,  472,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  449,  446,
      445,  444,  438,  437,  436,  435,  434,  433,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  373,  372,  371,  370,  369,

      368,  367,  366,  365,  364,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  326,  325,  324,  323,  322,  321,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  264,  263,
      262,  261,  260,  257,  256,  255,  254,  253,  252,  251,

      250,  249,  248,  247,  246,  245,  236,  233,  232,  227,
      224,  223,  222,  221,  218,  217,  216,  215,  214,  213,
      212,  211,  208,  205,  204,  201,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  185,  184,  183,  182,  181,
      180,  179,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  162,  161,  160,  159,  158,  157,  156,
       54,  145,  123,  120,   89,   86,   85,   84,   83,   82,
       81,   80,   76,   64,   58,   55,   54,   52,  815,    3,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815
    } ;

static yyconst flex_int16_t yy_chk[1049] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   10,   12,
       18,   18,   13,   14,   14,   14,   14,   14,   14,   14,
       31,   12,   10,   13,   16,   29,   16,   16,   16,   16,
       16,   16,   16,   20,   20,   31,   32,   29,   32,   40,

       16,   16,   34,   33,   33,   40,   34,   33,   35,   66,
       35,   16,   34,   16,   33,   36,   38,   33,   42,   35,
       16,   16,   37,   36,   38,   37,   36,   37,   48,   36,
       45,   51,   42,   48,   66,   16,  743,   48,   16,   17,
       45,   17,   17,   17,   17,   17,   17,   17,   44,   49,
       39,  144,   46,   39,  144,   17,   17,   39,   39,   46,
       46,   85,   44,   49,   44,   47,   17,   44,   47,  133,
       46,   46,  106,   46,   85,   17,   17,   47,   51,   63,
       63,   65,   65,  106,   47,  133,  744,   68,   68,  141,
       17,   68,   68,   68,   68,   68,   68,   68,  141,   63,

       63,   65,   65,   67,  745,   67,   67,   67,   67,   67,
       67,   67,   98,   98,   98,  117,  122,  119,  117,   67,
       67,  124,  117,  122,  117,  119,  138,  140,  140,  172,
      178,  178,  150,  150,  746,  124,  748,  138,  749,   67,
       67,  148,  148,  172,  371,  148,  148,  148,  148,  148,
      148,  148,  150,  150,  151,  151,  155,  371,  151,  151,
      151,  151,  151,  151,  151,  153,  153,  153,  153,  153,
      153,  153,  154,  154,  154,  154,  154,  154,  154,  230,
      155,  199,  199,  199,  256,  256,  256,  154,  230,  237,
      237,  237,  237,  237,  237,  237,  238,  238,  238,  238,

      238,  238,  238,  280,  280,  280,  480,  154,  750,  296,
      751,  238,  752,  199,  239,  239,  296,  480,  239,  239,
      239,  239,  239,  239,  239,  318,  318,  318,  357,  357,
      357,  238,  241,  241,  241,  241,  241,  241,  241,  242,
      242,  242,  242,  242,  242,  242,  327,  327,  327,  327,
      327,  327,  327,  753,  242,  328,  328,  328,  328,  328,
      328,  328,  358,  358,  358,  358,  366,  366,  366,  754,
      328,  423,  423,  423,  242,  755,  366,  366,  435,  435,
      435,  436,  436,  436,  437,  437,  437,  438,  438,  438,
      328,  469,  469,  469,  481,  481,  481,  438,  438,  756,

      759,  469,  469,  761,  763,  481,  493,  493,  493,  494,
      494,  494,  495,  495,  495,  496,  496,  496,  497,  497,
      497,  498,  498,  498,  515,  516,  531,  531,  617,  617,
      617,  621,  765,  770,  771,  531,  772,  515,  516,  775,
      621,  776,  778,  779,  780,  781,  782,  783,  784,  785,
      786,  787,  788,  789,  790,  792,  795,  799,  800,  801,
      802,  803,  804,  805,  806,  809,  810,  812,  813,  816,
      818,  816,  816,  816,  817,  817,  817,  819,  820,  820,
      742,  741,  740,  739,  738,  737,  736,  734,  733,  732,
      730,  729,  728,  727,  726,  724,  723,  722,  721,  720,

      719,  717,  716,  715,  714,  713,  711,  710,  709,  708,
      707,  706,  705,  703,  702,  701,  700,  699,  698,  697,
      696,  695,  693,  692,  688,  687,  686,  685,  684,  683,
      682,  681,  680,  679,  678,  677,  676,  675,  673,  672,
      671,  670,  669,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  658,  657,  656,  653,  652,  651,  650,
      649,  648,  647,  646,  642,  641,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,
      620,  619,  618,  616,  615,  614,  613,  610,  609,  607,
      606,  605,  603,  602,  601,  600,  599,  598,  597,  596,

      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  582,  581,  580,  579,  558,  556,  555,  554,  553,
      552,  551,  550,  549,  547,  546,  545,  544,  543,  541,
      539,  538,  537,  536,  535,  533,  532,  530,  529,  528,
      527,  526,  525,  524,  521,  520,  519,  518,  514,  513,
      512,  511,  510,  500,  499,  492,  486,  485,  484,  482,
      479,  478,  477,  476,  475,  474,  473,  472,  471,  470,
      468,  467,  466,  460,  459,  456,  455,  453,  452,  451,
      450,  449,  447,  446,  445,  443,  442,  441,  440,  439,
      434,  433,  432,  431,  430,  428,  427,  426,  424,  422,

      421,  420,  418,  417,  416,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  403,  402,  400,  398,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  384,  383,  382,
      381,  380,  378,  377,  376,  375,  374,  373,  372,  370,
      369,  367,  365,  363,  362,  361,  360,  359,  356,  354,
      353,  352,  351,  350,  348,  347,  345,  344,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  326,
      325,  323,  322,  321,  320,  319,  317,  316,  314,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  295,  294,  291,  290,  289,

      285,  284,  283,  282,  281,  279,  277,  276,  275,  274,
      273,  272,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  257,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  236,  235,  234,  233,  232,  231,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  207,  206,  205,  204,  203,  202,  201,  200,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  188,  187,
      186,  185,  184,  183,  182,  181,  180,  179,  177,  176,
      175,  174,  173,  171,  170,  168,  167,  166,  165,  164,

      163,  162,  161,  160,  159,  158,  145,  143,  142,  139,
      137,  136,  135,  134,  132,  131,  130,  129,  128,  127,
      126,  125,  123,  121,  120,  118,  116,  115,  113,  112,
      111,  110,  109,  108,  107,  105,  104,  103,  102,  101,
      100,   99,   97,   96,   95,   94,   93,   92,   91,   90,
       88,   87,   86,   84,   83,   82,   81,   80,   78,   74,
       53,   50,   43,   41,   30,   28,   27,   26,   25,   24,
       23,   22,   19,   15,   11,    9,    8,    7,    3,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815
    } ;

static yyconst flex_int16_t yy_rule_linenum[212] =
    {   0,
       69,   70,   72,   73,   74,   75,   76,   77,   78,   79,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
       91,   94,   95,   96,   97,   98,   99,  100,  101,  102,
      103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
      113,  114,  117,  118,  119,  120,  121,  122,  123,  124,
      126,  127,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  138,  139,  140,  142,  143,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  156,  158,  159,
      160,  161,  162,  163,  166,  167,  168,  169,  170,  171,
      172,  173,  174,  175,  176,  177,  178,  179,  180,  181,

      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  225,  226,  227,  228,  230,  231,  232,  233,
      234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  256,  257,  258,  259,  260,  261,  264,  265,
      266,  267,  268,  269,  270,  271,  272,  273,  275,  276,
      277,  278,  279,  280,  281,  282,  283,  284,  287,  288,

      289,  291,  296,  297,  298,  299,  300,  302,  306,  311,
      316
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "tokens.ll"
#line 2 "tokens.ll"
#include <string>
#include "AST/AST.h"
#include "AST/ParserType.h"
#include "parser.hpp"

static int classify_identifier(const char *name);

#define YY_USER_ACTION            \
   do {               \
      yylloc->first_column = yycolumn + 1;      \
      yylloc->first_line = yylineno + 1;      \
      yycolumn += yyleng;         \
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0;

static int literal_integer(char *text, int len, YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
           text[len - 1] == 'U');
   const char *digits = text;

   /* Skip "0x" */
   if (base == 16)
      digits += 2;

#ifdef _MSC_VER
   unsigned __int64 value = _strtoui64(digits, NULL, base);
#else
   unsigned long long value = strtoull(digits, NULL, base);
#endif

   lval->number = (int)value;

   if (value > UINT_MAX) 
   {
        /* Note that signed 0xffffffff is valid, not out of range! */
        printf("Literal value '%s' out of range\n", text);
   } 
   else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) 
   {
        /* Tries to catch unintentionally providing a negative value.
        * Note that -2147483648 is parsed as -(2147483648), so we don't
        * want to warn for INT_MAX.
        */
        printf("Signed literal value '%s' is interpreted as %d\n", text, lval->number);
   }
   return is_uint ? TOK_UINT_CONSTANT : TOK_INT_CONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yylval, yylloc, base)

#define LITERAL_FLOAT \
    {   \
        yylval->real = strtod(yytext, NULL); \
        return TOK_FLOAT_CONSTANT; \
    }

#line 1107 "tokens.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

int yyget_column  (yyscan_t yyscanner );

void yyset_column (int column_no ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 67 "tokens.ll"


#line 1411 "tokens.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 816 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 815 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 212 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 212 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 213 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 69 "tokens.ll"
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 70 "tokens.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "tokens.ll"
return TOK_CONST;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "tokens.ll"
return TOK_BOOL;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "tokens.ll"
return TOK_FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "tokens.ll"
return TOK_FLOAT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "tokens.ll"
return TOK_HALF;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "tokens.ll"
return TOK_INT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "tokens.ll"
return TOK_UINT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "tokens.ll"
return TOK_VOID;          
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 81 "tokens.ll"
return TOK_BREAK;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "tokens.ll"
return TOK_CONTINUE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 83 "tokens.ll"
return TOK_DO;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 84 "tokens.ll"
return TOK_WHILE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 85 "tokens.ll"
return TOK_ELSE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 86 "tokens.ll"
return TOK_FOR;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 87 "tokens.ll"
return TOK_IF;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 88 "tokens.ll"
return TOK_DISCARD;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 89 "tokens.ll"
return TOK_RETURN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 90 "tokens.ll"
return TOK_STRUCT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 91 "tokens.ll"
return TOK_CBUFFER;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 94 "tokens.ll"
return TOK_BOOL_VEC2;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 95 "tokens.ll"
return TOK_BOOL_VEC3;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 96 "tokens.ll"
return TOK_BOOL_VEC4;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 97 "tokens.ll"
return TOK_INT_VEC2;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 98 "tokens.ll"
return TOK_INT_VEC3;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 99 "tokens.ll"
return TOK_INT_VEC4;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 100 "tokens.ll"
return TOK_UINT_VEC2;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 101 "tokens.ll"
return TOK_UINT_VEC3;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 102 "tokens.ll"
return TOK_UINT_VEC4;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 103 "tokens.ll"
return TOK_FLOAT_VEC2;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 104 "tokens.ll"
return TOK_FLOAT_VEC3;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 105 "tokens.ll"
return TOK_FLOAT_VEC4;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 106 "tokens.ll"
return TOK_FLOAT_VEC2X2;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 107 "tokens.ll"
return TOK_FLOAT_VEC2X3;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 108 "tokens.ll"
return TOK_FLOAT_VEC2X4;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 109 "tokens.ll"
return TOK_FLOAT_VEC3X2;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 110 "tokens.ll"
return TOK_FLOAT_VEC3X3;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 111 "tokens.ll"
return TOK_FLOAT_VEC3X4;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 112 "tokens.ll"
return TOK_FLOAT_VEC4X2;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 113 "tokens.ll"
return TOK_FLOAT_VEC4X3;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 114 "tokens.ll"
return TOK_FLOAT_VEC4X4;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "tokens.ll"
return TOK_POINT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 118 "tokens.ll"
return TOK_LINE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 119 "tokens.ll"
return TOK_TRIANGLE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 120 "tokens.ll"
return TOK_LINEADJ;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 121 "tokens.ll"
return TOK_TRIANGLEADJ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 122 "tokens.ll"
return TOK_POINTSTREAM;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 123 "tokens.ll"
return TOK_LINESTREAM;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 124 "tokens.ll"
return TOK_TRIANGLESTREAM;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "tokens.ll"
return TOK_INPUTPATCH;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "tokens.ll"
return TOK_OUTPUTPATCH;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "tokens.ll"
return TOK_IN;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "tokens.ll"
return TOK_OUT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 131 "tokens.ll"
return TOK_INOUT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 132 "tokens.ll"
return TOK_UNIFORM;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "tokens.ll"
return TOK_VARYING;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "tokens.ll"
return TOK_CENTROID;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "tokens.ll"
return TOK_INVARIANT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "tokens.ll"
return TOK_NOINTERPOLATION;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "tokens.ll"
return TOK_LINEAR;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "tokens.ll"
return TOK_NOPERSPECTIVE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 139 "tokens.ll"
return TOK_GLOBALLYCOHERENT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "tokens.ll"
return TOK_GROUPSHARED;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 142 "tokens.ll"
return TOK_ROWMAJOR;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 143 "tokens.ll"
return TOK_COLUMNMAJOR;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 145 "tokens.ll"
return TOK_BUFFER;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 146 "tokens.ll"
return TOK_TEXTURE1D;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 147 "tokens.ll"
return TOK_TEXTURE1D_ARRAY;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 148 "tokens.ll"
return TOK_TEXTURE2D;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 149 "tokens.ll"
return TOK_TEXTURE2D_ARRAY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 150 "tokens.ll"
return TOK_TEXTURE2DMS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 151 "tokens.ll"
return TOK_TEXTURE2DMS_ARRAY;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 152 "tokens.ll"
return TOK_TEXTURE3D;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 153 "tokens.ll"
return TOK_TEXTURECUBE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "tokens.ll"
return TOK_TEXTURECUBE_ARRAY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 155 "tokens.ll"
return TOK_SAMPLERSTATE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 156 "tokens.ll"
return TOK_SAMPLER_CMP_STATE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 158 "tokens.ll"
return TOK_RWBUFFER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 159 "tokens.ll"
return TOK_RWTEXTURE1D;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 160 "tokens.ll"
return TOK_RWTEXTURE1D_ARRAY;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 161 "tokens.ll"
return TOK_RWTEXTURE2D;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 162 "tokens.ll"
return TOK_RWTEXTURE2D_ARRAY;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 163 "tokens.ll"
return TOK_RWTEXTURE3D;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 166 "tokens.ll"
return TOK_ASM;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 167 "tokens.ll"
return TOK_CLASS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 168 "tokens.ll"
return TOK_UNION;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 169 "tokens.ll"
return TOK_ENUM;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 170 "tokens.ll"
return TOK_TYPEDEF;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 171 "tokens.ll"
return TOK_TEMPLATE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 172 "tokens.ll"
return TOK_THIS;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 173 "tokens.ll"
return TOK_PACKED;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 174 "tokens.ll"
return TOK_GOTO;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 175 "tokens.ll"
return TOK_SWITCH;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 176 "tokens.ll"
return TOK_DEFAULT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 177 "tokens.ll"
return TOK_INLINE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 178 "tokens.ll"
return TOK_NOINLINE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 179 "tokens.ll"
return TOK_VOLATILE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 180 "tokens.ll"
return TOK_PUBLIC;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 181 "tokens.ll"
return TOK_STATIC;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 182 "tokens.ll"
return TOK_EXTERN;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 183 "tokens.ll"
return TOK_EXTERNAL;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 184 "tokens.ll"
return TOK_INTERFACE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 185 "tokens.ll"
return TOK_LONG;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 186 "tokens.ll"
return TOK_SHORT;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 187 "tokens.ll"
return TOK_DOUBLE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 188 "tokens.ll"
return TOK_FIXED;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 189 "tokens.ll"
return TOK_UNSIGNED;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 190 "tokens.ll"
return TOK_HALF_VEC2;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 191 "tokens.ll"
return TOK_HALF_VEC3;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 192 "tokens.ll"
return TOK_HALF_VEC4;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 193 "tokens.ll"
return TOK_HALF_VEC2X2;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 194 "tokens.ll"
return TOK_HALF_VEC2X3;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 195 "tokens.ll"
return TOK_HALF_VEC2X4;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 196 "tokens.ll"
return TOK_HALF_VEC3X2;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 197 "tokens.ll"
return TOK_HALF_VEC3X3;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 198 "tokens.ll"
return TOK_HALF_VEC3X4;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 199 "tokens.ll"
return TOK_HALF_VEC4X2;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 200 "tokens.ll"
return TOK_HALF_VEC4X3;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 201 "tokens.ll"
return TOK_HALF_VEC4X4;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 202 "tokens.ll"
return TOK_DOUBLE_VEC2;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 203 "tokens.ll"
return TOK_DOUBLE_VEC3;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 204 "tokens.ll"
return TOK_DOUBLE_VEC4;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 205 "tokens.ll"
return TOK_FIXED_VEC2;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 206 "tokens.ll"
return TOK_FIXED_VEC3;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 207 "tokens.ll"
return TOK_FIXED_VEC4;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 208 "tokens.ll"
return TOK_FIXED_VEC2X2;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 209 "tokens.ll"
return TOK_FIXED_VEC2X3;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 210 "tokens.ll"
return TOK_FIXED_VEC2X4;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 211 "tokens.ll"
return TOK_FIXED_VEC3X2;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 212 "tokens.ll"
return TOK_FIXED_VEC3X3;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 213 "tokens.ll"
return TOK_FIXED_VEC3X4;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 214 "tokens.ll"
return TOK_FIXED_VEC4X2;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 215 "tokens.ll"
return TOK_FIXED_VEC4X3;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 216 "tokens.ll"
return TOK_FIXED_VEC4X4;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 217 "tokens.ll"
return TOK_SAMPLER2DRECT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 218 "tokens.ll"
return TOK_SAMPLER3DRECT;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 219 "tokens.ll"
return TOK_SAMPLER2DRECTSHADOW;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 220 "tokens.ll"
return TOK_SIZEOF;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 221 "tokens.ll"
return TOK_CAST;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 222 "tokens.ll"
return TOK_NAMESPACE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 223 "tokens.ll"
return TOK_USING;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 225 "tokens.ll"
return TOK_LOWP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 226 "tokens.ll"
return TOK_MEDIUMP;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 227 "tokens.ll"
return TOK_HIGHP;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 228 "tokens.ll"
return TOK_PRECISION;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 230 "tokens.ll"
return TOK_CASE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 231 "tokens.ll"
return TOK_COMMON;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 232 "tokens.ll"
return TOK_PARTITION;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 233 "tokens.ll"
return TOK_ACTIVE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 234 "tokens.ll"
return TOK_SUPERP;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 235 "tokens.ll"
return TOK_SAMPLERBUFFER;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 236 "tokens.ll"
return TOK_FILTER;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 237 "tokens.ll"
return TOK_IMAGE1D;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 238 "tokens.ll"
return TOK_IMAGE2D;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 239 "tokens.ll"
return TOK_IMAGE3D;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 240 "tokens.ll"
return TOK_IMAGECUBE;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 241 "tokens.ll"
return TOK_IIMAGE1D;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 242 "tokens.ll"
return TOK_IIMAGE2D;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 243 "tokens.ll"
return TOK_IIMAGE3D;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 244 "tokens.ll"
return TOK_IIMAGECUBE;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 245 "tokens.ll"
return TOK_UIMAGE1D;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 246 "tokens.ll"
return TOK_UIMAGE2D;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 247 "tokens.ll"
return TOK_UIMAGE3D;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 248 "tokens.ll"
return TOK_UIMAGECUBE;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 249 "tokens.ll"
return TOK_IMAGE1DARRAY;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 250 "tokens.ll"
return TOK_IMAGE2DARRAY;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 251 "tokens.ll"
return TOK_IIMAGE1DARRAY;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 252 "tokens.ll"
return TOK_IIMAGE2DARRAY;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 253 "tokens.ll"
return TOK_UIMAGE1DARRAY;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 254 "tokens.ll"
return TOK_UIMAGE2DARRAY;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 255 "tokens.ll"
return TOK_IMAGE1DSHADOW;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 256 "tokens.ll"
return TOK_IMAGE2DSHADOW;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 257 "tokens.ll"
return TOK_IMAGE1DARRAYSHADOW;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 258 "tokens.ll"
return TOK_IMAGE2DARRAYSHADOW;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 259 "tokens.ll"
return TOK_IMAGEBUFFER;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 260 "tokens.ll"
return TOK_IIMAGEBUFFER;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 261 "tokens.ll"
return TOK_UIMAGEBUFFER;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 264 "tokens.ll"
return TOK_INCREMENT;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 265 "tokens.ll"
return TOK_DECREMENT;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 266 "tokens.ll"
return TOK_LE;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 267 "tokens.ll"
return TOK_GE;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 268 "tokens.ll"
return TOK_EQ;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 269 "tokens.ll"
return TOK_NEQ;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 270 "tokens.ll"
return TOK_BOOL_AND;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 271 "tokens.ll"
return TOK_BOOL_OR;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 272 "tokens.ll"
return TOK_LSHIFT;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 273 "tokens.ll"
return TOK_RSHIFT;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 275 "tokens.ll"
return TOK_MULTIPLY_ASSIGN;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 276 "tokens.ll"
return TOK_DIVIDE_ASSIGN;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 277 "tokens.ll"
return TOK_ADD_ASSIGN;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 278 "tokens.ll"
return TOK_MOD_ASSIGN;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 279 "tokens.ll"
return TOK_LSHIFT_ASSIGN;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 280 "tokens.ll"
return TOK_RSHIFT_ASSIGN;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 281 "tokens.ll"
return TOK_AND_ASSIGN;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 282 "tokens.ll"
return TOK_XOR_ASSIGN;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 283 "tokens.ll"
return TOK_OR_ASSIGN;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 284 "tokens.ll"
return TOK_SUBTRACT_ASSIGN;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 287 "tokens.ll"
return LITERAL_INTEGER(10);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 288 "tokens.ll"
return LITERAL_INTEGER(16);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 289 "tokens.ll"
return LITERAL_INTEGER(8);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 291 "tokens.ll"
{
                                                yylval->string = new std::string(yytext, yyleng);
                                                return TOK_STRING_CONSTANT;
                                            }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 296 "tokens.ll"
LITERAL_FLOAT
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 297 "tokens.ll"
LITERAL_FLOAT
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 298 "tokens.ll"
LITERAL_FLOAT
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 299 "tokens.ll"
LITERAL_FLOAT
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 300 "tokens.ll"
LITERAL_FLOAT
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 302 "tokens.ll"
{
                                                yylval->number = 1;
                                                return TOK_BOOL_CONSTANT;
                                            }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 306 "tokens.ll"
{
                                                yylval->number = 0;
                                                return TOK_BOOL_CONSTANT;
                                            }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 311 "tokens.ll"
{ 
                                                yylval->identifier = new std::string(yytext, yyleng);
                                                return classify_identifier(yytext);
                                            }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 316 "tokens.ll"
printf("Unknown token!\n"); yyterminate();
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 318 "tokens.ll"
ECHO;
	YY_BREAK
#line 2598 "tokens.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 816 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 816 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 815);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 317 "tokens.ll"



int
classify_identifier(const char *name)
{
   /*if (state->symbols->get_variable(name) || state->symbols->get_function(name))
      return TOK_IDENTIFIER;
   else if (state->symbols->get_type(name))
      return TOK_TYPE_IDENTIFIER;
   else*/
      return TOK_NEW_IDENTIFIER;
}

